<div id="modalCatalogResource" class="modalCatalogResource">
    <div class="modalContainer">
        <div class="modalTitle">
            <h5 style="font-size: 1em; margin-top: 0px">
                <%=i18n.escapeRoom.steps.indications.front.catalog.addResource%>
            </h5>
            <span class="building-block-icon material-icons" onclick="toggleCatalogModal()"> close </span>

        </div>
        <div style="margin: 4rem"></div>
        <div class="sections" <%if(endPoint=="class"){%> style="height: auto;"<%}%>>
        <section class="sectionAddResource">
            <p class="title-section ">
                <%=i18n.escapeRoom.steps.indications.front.catalog.gamificationElements%>
            </p>
            <div class="btn-group">
                <button onclick='insertGamification(0,"countdown",{}, puzzleList)' class="resourceCatalogBtn">
                    <span class="building-block-icon material-icons"> add </span>
                    <p><%=i18n.escapeRoom.steps.indications.front.countdown%></p>
                    <img class="building-block-img" src="/images/countdown.png" />
                </button>
                <button onclick='insertGamification(0,"ranking",{}, puzzleList)' class="resourceCatalogBtn">
                    <span class="building-block-icon material-icons"> add </span>
                    <p><%=i18n.escapeRoom.steps.indications.front.ranking%></p>
                    <img class="building-block-img" src="/images/ranking.png" />
                </button>
                <%if(endPoint!=="class"){%>
                <button onclick='insertGamification(0,"progress",{}, puzzleList)' class="resourceCatalogBtn">
                    <span class="building-block-icon material-icons"> add </span>
                    <p><%=i18n.escapeRoom.steps.indications.front.progress%></p>
                    <span class="building-block-icon material-icons" style="color: var(--lightred);">
                        show_chart </span>
                </button>
                <%}%>
            </div>
        </section>
        <section class="sectionAddResource">
            <%if(availableReusablePuzzles.length){%>
            <p class="title-section">
                <%=i18n.escapeRoom.steps.indications.front.catalog.interactiveResources%>
            </p>
            <%}%>
            <div class="resources-group">
                    <%
                    availableReusablePuzzles.forEach(puzzle => {

                        let goodConfig;
                        try {
                            goodConfig = JSON.parse(puzzle.config);
                        } catch(e) {
                            console.error("Error parsing JSON:", puzzle.config);
                        }
                    %>

                     <div class="resource-card">
                        <% if( goodConfig && goodConfig?.thumbnail) {%>
                            <img src="/reusablePuzzles/<%=puzzle.dataValues.reusablePuzzleId%>/<%=goodConfig?.thumbnail%>"/>
                        <%} else{%>
                            <img src="/images/keypad.png"/>
                        <%} %>
                        <%=puzzle.id%>
                        <button
                            class="resourceCatalogBtn"
                            data-name = "<%=puzzle.name%>"
                            data-description = <%=puzzle.description%>
                            <%if (escapeRoom.puzzles.length == 0) {%>
                                disabled
                                title="<%=i18n.escapeRoom.steps.indications.front.catalog.interactiveResourcesNotAllowed%>"
                                style = "cursor: help;"
                            <%} else {%>
                                onclick="openPuzzleConfiguration(<%=JSON.stringify(puzzle)%>,<%= puzzle.dataValues.reusablePuzzleId%> )"
                            <%}%>>
                            <span class="building-block-icon material-icons"> add </span>
                            <p><%=puzzle.name%></p>
                        </button>
                    </div>
                <% })%>
            </div>
        </section>

        <!--<section class="sectionAddResource">
            <p class="title-section">
                <%=i18n.escapeRoom.steps.indications.front.catalog.scenarios2D%>
            </p>
            <div class="resource-card" id="scenery">
                <img src="/images/scenery.png">
                <button class="resourceCatalogBtn">
                    <span class="building-block-icon material-icons"> add </span>
                    <p><%=i18n.escapeRoom.steps.indications.front.catalog.scenarios2D%></p>
                </button>
            </div>
        </section>-->
        <section id="configZone" hidden>
            <div class="configReusablePuzzle">
                <form action="reusablePuzzleInstance" onsubmit="send(event,this)" style="background-image:url('../images/background.png')" method="POST" id="configForm">
                </form>
                <div class="previewReusablePuzzle">
                    <iframe src="" id="previewReusablePuzzleIframe" frameborder="0"></iframe>
                </div>
            </div>
        </section>
    </div>
    </div>
</div>
<div id="resourceCatalog" style="display:flex;align-items:end;flex-direction:column">
    <div style="width:100%">
        <div style="display: flex; justify-content:end; margin-bottom:0.2em; gap: 0.7rem">
                <% if ((endPoint !== "indications") && (endPoint !== "after")) {%>
                    <button class="rounded building-block-bar-button uploadButton" onclick="toggleCatalogModal()">
                        <a href="#">
                            <span class="building-block-icon material-icons"> add </span>
                            <p><%=i18n.escapeRoom.steps.indications.front.catalog.addResource%></p>
                        </a>
                    </button>
                <% } %>
                    <button class="rounded building-block-bar-button uploadButton">
                        <a href="assets?mode=catalogView">
                            <span class="building-block-icon material-icons"> upload </span>
                            <p><%=i18n.escapeRoom.steps.indications.front.catalog.uploadFile%></p>
                        </a>
                    </button>


        </div>
    </div>
    <div style="min-height:40px;height:auto; max-height: 240px; overflow-y:auto;width:100%;position:relative">
        <table style="width:100%;table-layout:fixed; padding: 16px" class="tab-content catalog-container"
            id="myTabContent">
            <colgroup>
                <col span="1" style="width: 50%;">
                <col span="1" style="width: 20%;">
                <col span="1" style="width: 30%;">
            </colgroup>
             <tr class="tableTitles">
                <th><%=i18n.escapeRoom.steps.indications.front.catalog.table.name%></th>
                <th><%=i18n.escapeRoom.steps.indications.front.catalog.table.type%></th>
                <th></th>
            </tr>

            <%if(endPoint==="team"){
                reusablePuzzlesInstances.map(puzzle=> {
                let goodConfig={};
                try{
                    goodConfig = JSON.parse(puzzle.config)
                } catch(e){
                    console.error("Error parsing JSON:", puzzle.config);
            }%>
                <tr id="p-<%=puzzle.id%>" class="catalogItem">
                    <td>
                        <p class="title">
                            <%=puzzle.name%>
                        </p>
                    </td>
                    <td> <span class="building-block-icon material-icons btn-green" > videogame_asset </span>
                    </td>
                    <td>
                        <div class=" button-group row-button">
                            <div class="overlay-trigger" data-id="<%=puzzle.id%>">
                                <p class="text-overlay">
                                    <%= i18n.escapeRoom.steps.indications.front.catalog.deleteConfirm%>
                                </p>
                                <button class="deleteButton" type="button"
                                    onclick='overlayTriggerCatalog("<%=puzzle.id%>", true)'><%=i18n.common.cancel%></button>
                                <button class="acceptButton" type="button"
                                    onclick='deleteReusablePuzzleInstance("<%=puzzle.id%>")'><%=i18n.common.accept%></button>
                            </div>
                            <button class="listButton iconButton delete-button"
                                onclick="overlayTriggerCatalog('<%=puzzle.id%>', false)">
                                <span class="building-block-icon material-icons" id="delete">
                                    delete_outline </span>
                            </button>
                            <button class="listButton iconButton editButton"
                                onclick="editPuzzle('<%=puzzle.id%>', 'application/reusable', <%=JSON.stringify({reusablePuzzleId:puzzle.reusablePuzzleId, name:puzzle.name, description:puzzle.description, id:puzzle.id, config:puzzle.config})%>)">
                                <span class="building-block-icon material-icons" id="edit"> edit
                                </span>
                            </button>
                            <button class="listButton linkButton" onclick='copyURl("<%=puzzle.url%>")'>
                                <span class="building-block-icon material-icons" id="link"> link
                                </span>
                                <div class="tooltip-link"> <%= i18n.escapeRoom.steps.indications.front.catalog.copyUrl%> </div>
                                <div class="tooltip-link" id="link-copied">
                                    <%=i18n.escapeRoom.steps.indications.front.catalog.copied%>
                                </div>
                            </button>

                            <button class="rounded listButton addButton"
                                onclick='insertAndScrollContent(0,"reusable", "<%=puzzle.id%>", [window.puzzles.findIndex(p=>p.id == <%=JSON.parse(puzzle.config).puzzle%>)])'>
                                <span class="building-block-icon material-icons" id="add"> add
                                </span>
                                <p>
                                    <%=i18n.escapeRoom.steps.indications.front.catalog.addBlock%>
                                </p>
                            </button>
                            </div>
                    </td>
                </tr>
                <% })} %>


                    <tr class="catalogItem" id="noResources">
                        <td colspan="3" style="text-align: center; height:200px
                        <% if(assets.length === 0 && reusablePuzzlesInstances.length === 0) {%>
                               <%}else{%>; display: none;<%}%>">
                            <p class="title">
                                <%=i18n.escapeRoom.steps.indications.front.catalog.table.noResources%>
                            </p>
                        </td>
                    </tr>

                    <% assets.map(asset=> {%>
                        <% if (asset.mime.search(new RegExp(/image\/.*/))!==-1){ %>
                            <tr class="catalogItem" id=<%=asset.id%> >
                                <td>
                                    <p class="title">
                                        <%=asset.filename%>
                                    </p>
                                </td>
                                <td> <span class="building-block-icon material-icons btn-blue"> image </span>
                                </td>
                                <td>
                                    <div class=" button-group row-button">
                                        <div class="overlay-trigger" data-id="<%=asset.id%>">
                                            <p class="text-overlay">
                                                <%= i18n.escapeRoom.steps.indications.front.catalog.deleteConfirm%>
                                            </p>
                                            <button class="deleteButton" type="button"
                                                onclick='overlayTriggerCatalog("<%=asset.id%>", true)'><%=i18n.common.cancel%></button>
                                            <button class="acceptButton" type="button"
                                                onclick='deleteAsset("<%=asset.id%>")'><%=i18n.common.accept%></button>
                                        </div>
                                        <button class="listButton iconButton delete-button"
                                            onclick="overlayTriggerCatalog('<%=asset.id%>', false)">
                                            <span class="building-block-icon material-icons" id="delete">
                                                delete_outline
                                            </span>
                                        </button>
                                        <button class="listButton iconButton editButton"
                                            onclick='editAsset("<%=asset.id%>", "<%=asset.mime%>")'>
                                            <span class="building-block-icon material-icons" id="edit"> edit
                                            </span>
                                        </button>
                                        <button class="listButton linkButton" onclick='copyURl("<%=asset.url%>")'>
                                            <span class="building-block-icon material-icons" id="link"> link
                                            </span>
                                            <div class="tooltip-link">
                                                <%= i18n.escapeRoom.steps.indications.front.catalog.copyUrl%>
                                            </div>
                                            <div class="tooltip-link" id="link-copied">
                                                <%=i18n.escapeRoom.steps.indications.front.catalog.copied%>
                                            </div>
                                        </button>

                                        <button class="rounded listButton addButton"
                                            onclick='insertAndScrollContent(0,"asset", "<%=asset.id%>", puzzleList)'>
                                            <span class="building-block-icon material-icons" id="add"> add
                                            </span>
                                            <p>
                                                <%=i18n.escapeRoom.steps.indications.front.catalog.addBlock%>
                                            </p>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                            <% } else if (asset.mime.search(new RegExp(/video\/.*/))!==-1){ %>
                                <tr class="catalogItem" id=<%=asset.id%> >
                                    <td>
                                        <p class="title"><%=asset.filename%></p>
                                    </td>
                                    <td>
                                        <span class="building-block-icon material-icons btn-red"> videocam </span>
                                    </td>
                                    <td>
                                        <div class=" button-group row-button">
                                            <div class="overlay-trigger" data-id="<%=asset.id%>">
                                                <p class="text-overlay">
                                                    <%= i18n.escapeRoom.steps.indications.front.catalog.deleteConfirm%>
                                                </p>
                                                <button class="deleteButton" type="button"
                                                    onclick='overlayTriggerCatalog("<%=asset.id%>", true)'><%=i18n.common.cancel%></button>
                                                <button class="acceptButton" type="button"
                                                    onclick='deleteAsset("<%=asset.id%>")'><%=i18n.common.accept%></button>
                                            </div>
                                            <button class="listButton iconButton delete-button"
                                                onclick="overlayTriggerCatalog('<%=asset.id%>', false)">
                                                <span class="building-block-icon material-icons" id="delete"> delete_outline </span>
                                            </button>
                                            <button class="listButton iconButton editButton"
                                                onclick='editAsset("<%=asset.id%>", "<%=asset.mime%>")'>
                                                <span class="building-block-icon material-icons" id="edit"> edit  </span>
                                            </button>
                                            <button class="listButton linkButton" onclick='copyURl("<%=asset.url%>")'>
                                                <span class="building-block-icon material-icons" id="link"> link
                                                </span>
                                                <div class="tooltip-link"> <%= i18n.escapeRoom.steps.indications.front.catalog.copyUrl%> </div>
                                                <div class="tooltip-link" id="link-copied">  <%=i18n.escapeRoom.steps.indications.front.catalog.copied%>  </div>
                                            </button>
                                            <button class="rounded listButton addButton"
                                            onclick='insertAndScrollContent(0,"asset","<%=asset.id%>", puzzleList)'>
                                                <span class="building-block-icon material-icons" id="add"> add </span>
                                                <p><%=i18n.escapeRoom.steps.indications.front.catalog.addBlock%></p>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                <% } else if (asset.mime.search(new RegExp(/audio\/.*/))!==-1){ %>
                                    <tr class="catalogItem" id=<%=asset.id%> >
                                        <td>
                                            <p class="title">
                                                <%=asset.filename%>
                                            </p>
                                        </td>
                                        <td> <span class="building-block-icon material-icons btn-yellow">
                                                music_note </span> </td>
                                        <td>
                                            <div class=" button-group row-button">
                                                <div class=" overlay-trigger" data-id="<%=asset.id%>">
                                                    <p class="text-overlay">
                                                        <%= i18n.escapeRoom.steps.indications.front.catalog.deleteConfirm%>
                                                    </p>
                                                    <button class="deleteButton" type="button"
                                                        onclick='overlayTriggerCatalog("<%=asset.id%>", true)'><%=i18n.common.cancel%></button>
                                                    <button class="acceptButton" type="button"
                                                        onclick='deleteAsset("<%=asset.id%>")'><%=i18n.common.accept%></button>
                                                </div>
                                                <button class="listButton iconButton delete-button"
                                                    onclick="overlayTriggerCatalog('<%=asset.id%>', false)">
                                                    <span class="building-block-icon material-icons" id="delete">
                                                        delete_outline </span>
                                                </button>
                                                <button class="listButton iconButton editButton"
                                                    onclick='editAsset("<%=asset.id%>", "<%=asset.mime%>")'>
                                                    <span class="building-block-icon material-icons" id="edit">
                                                        edit
                                                    </span>
                                                </button>
                                                <button class="listButton linkButton"
                                                    onclick='copyURl("<%=asset.url%>")'>
                                                    <span class="building-block-icon material-icons" id="link">
                                                        link
                                                    </span>
                                                    <div class="tooltip-link"> <%= i18n.escapeRoom.steps.indications.front.catalog.copyUrl%> </div>
                                                    <div class="tooltip-link" id="link-copied">
                                                        <%=i18n.escapeRoom.steps.indications.front.catalog.copied%>
                                                    </div>
                                                </button>
                                                <button class="rounded listButton addButton"
                                                    onclick='insertAndScrollContent(0,"asset","<%=asset.id%>", puzzleList)'>
                                                    <span class="building-block-icon material-icons" id="add">
                                                        add
                                                    </span>
                                                    <p>
                                                        <%=i18n.escapeRoom.steps.indications.front.catalog.addBlock%>
                                                    </p>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                    <% } else if (asset.mime.search(new RegExp(/application\/pdf/))!==-1){ %>
                                        <tr class="catalogItem" id=<%=asset.id%> >
                                            <td>
                                                <p class=" title">
                                                    <%=asset.filename%>
                                                </p>
                                            </td>
                                            <td> <span class="building-block-icon material-icons btn-red">
                                                    picture_as_pdf </span> </td>
                                            <td>
                                                <div class=" button-group row-button">
                                                    <div class=" overlay-trigger" data-id="<%=asset.id%>">
                                                        <p class="text-overlay">
                                                            <%= i18n.escapeRoom.steps.indications.front.catalog.deleteConfirm%>
                                                        </p>
                                                        <button class="deleteButton" type="button"
                                                            onclick='overlayTriggerCatalog("<%=asset.id%>", true)'><%=i18n.common.cancel%></button>
                                                        <button class="acceptButton" type="button"
                                                            onclick='deleteAsset("<%=asset.id%>")'><%=i18n.common.accept%></button>
                                                    </div>
                                                    <button class="listButton iconButton delete-button"
                                                        onclick="overlayTriggerCatalog('<%=asset.id%>', false)">
                                                        <span class="building-block-icon material-icons" id="delete">
                                                            delete_outline </span>
                                                    </button>
                                                    <button class="listButton iconButton editButton"
                                                        onclick='editAsset("<%=asset.id%>", "<%=asset.mime%>")'>
                                                        <span class="building-block-icon material-icons" id="edit"> edit
                                                        </span>
                                                    </button>
                                                    <button class="listButton linkButton"
                                                        onclick='copyURl("<%=asset.url%>")'>
                                                        <span class="building-block-icon material-icons" id="link"> link
                                                        </span>
                                                        <div class="tooltip-link"> <%= i18n.escapeRoom.steps.indications.front.catalog.copyUrl%> </div>
                                                        <div class="tooltip-link" id="link-copied">
                                                            <%=i18n.escapeRoom.steps.indications.front.catalog.copied%>
                                                        </div>
                                                    </button>

                                                    <button class="rounded listButton addButton"
                                                        onclick='insertAndScrollContent(0,"asset","<%=asset.id%>", puzzleList)'>
                                                        <span class="building-block-icon material-icons" id="add"> add
                                                        </span>
                                                        <p>
                                                            <%=i18n.escapeRoom.steps.indications.front.catalog.addBlock%>
                                                        </p>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    <% } else if (asset.mime.search(new RegExp(/application\/webapp/))!==-1 && endPoint !== "indications" && endPoint !== "after"){ %>
                                        <tr class="catalogItem" id=<%=asset.id%> >
                                            <td>
                                                <p class=" title">
                                                    <%=asset.filename%>
                                                </p>
                                            </td>
                                            <td> <span class="building-block-icon material-icons btn-purple">
                                                    terminal </span> </td>
                                            <td>
                                                <div class=" button-group row-button">
                                                    <div class=" overlay-trigger" data-id="<%=asset.id%>">
                                                        <p class="text-overlay">
                                                            <%= i18n.escapeRoom.steps.indications.front.catalog.deleteConfirm%>
                                                        </p>
                                                        <button class="deleteButton" type="button"
                                                            onclick='overlayTriggerCatalog("<%=asset.id%>", true)'><%=i18n.common.cancel%></button>
                                                        <button class="acceptButton" type="button"
                                                            onclick='deleteAsset("<%=asset.id%>")'><%=i18n.common.accept%></button>
                                                    </div>
                                                    <button class="listButton iconButton delete-button"
                                                        onclick="overlayTriggerCatalog('<%=asset.id%>', false)">
                                                        <span class="building-block-icon material-icons" id="delete">
                                                            delete_outline </span>
                                                    </button>
                                                    <button class="listButton iconButton editButton"
                                                        onclick='editAsset("<%=asset.id%>", "<%=asset.mime%>")'>
                                                        <span class="building-block-icon material-icons" id="edit"> edit
                                                        </span>
                                                    </button>
                                                    <button class="listButton linkButton"
                                                        onclick='copyURl("<%=asset.url%>")'>
                                                        <span class="building-block-icon material-icons" id="link"> link
                                                        </span>
                                                        <div class="tooltip-link"> <%= i18n.escapeRoom.steps.indications.front.catalog.copyUrl%> </div>
                                                        <div class="tooltip-link" id="link-copied">
                                                            <%=i18n.escapeRoom.steps.indications.front.catalog.copied%>
                                                        </div>
                                                    </button>

                                                    <button class="rounded listButton addButton"
                                                        onclick='insertAndScrollContent(0,"asset", "<%=asset.id%>", puzzleList)'>
                                                        <span class="building-block-icon material-icons" id="add"> add
                                                        </span>
                                                        <p>
                                                            <%=i18n.escapeRoom.steps.indications.front.catalog.addBlock%>
                                                        </p>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                        <% } else { %>

                                        <tr class="catalogItem" id=<%=asset.id%> >
                                            <td>
                                                <p class=" title">
                                                    <%=asset.filename%>
                                                </p>
                                            </td>
                                            <td> <span class="building-block-icon material-icons btn-gray">
                                                    question_mark </span> </td>
                                            <td>
                                                <div class=" button-group row-button">
                                                    <div class=" overlay-trigger" data-id="<%=asset.id%>">
                                                        <p class="text-overlay">
                                                            <%= i18n.escapeRoom.steps.indications.front.catalog.deleteConfirm%>
                                                        </p>
                                                        <button class="deleteButton" type="button"
                                                            onclick='overlayTriggerCatalog("<%=asset.id%>", true)'><%=i18n.common.cancel%></button>
                                                        <button class="acceptButton" type="button"
                                                            onclick='deleteAsset("<%=asset.id%>")'><%=i18n.common.accept%></button>
                                                    </div>
                                                    <button class="listButton iconButton delete-button"
                                                        onclick="overlayTriggerCatalog('<%=asset.id%>', false)">
                                                        <span class="building-block-icon material-icons" id="delete">
                                                            delete_outline </span>
                                                    </button>
                                                    <button disabled class="listButton iconButton editButton"
                                                        onclick='editAsset("<%=asset.id%>", "<%=asset.mime%>")'>
                                                        <span class="building-block-icon material-icons" id="edit"> edit
                                                        </span>
                                                    </button>
                                                    <button class="listButton linkButton"
                                                        onclick='copyURl("<%=asset.url%>")'>
                                                        <span class="building-block-icon material-icons" id="link"> link
                                                        </span>
                                                        <div class="tooltip-link"> <%= i18n.escapeRoom.steps.indications.front.catalog.copyUrl%> </div>
                                                        <div class="tooltip-link" id="link-copied">
                                                            <%=i18n.escapeRoom.steps.indications.front.catalog.copied%>
                                                        </div>
                                                    </button>

                                                    <button disabled class="rounded listButton addButton"
                                                        onclick='insertAndScrollContent(0,"asset", "<%=asset.id%>", puzzleList)'>
                                                        <span class="building-block-icon material-icons" id="add"> add
                                                        </span>
                                                        <p>
                                                            <%=i18n.escapeRoom.steps.indications.front.catalog.addBlock%>
                                                        </p>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
    <% } return null;%>
        <% }) %>
            </table>

</div>
<div style="display:flex; margin-top:2em; align-items:center; justify-content: end; gap: 0.7rem">

    <% if ((endPoint !== "indications") && (endPoint !== "after")) {%>
    <button class="building-block-bar-button theme-btn" style="display:flex;">
        <span class="building-block-icon material-icons" style="color: var(--info);">color_lens</span>
        <span class="theme-text">
            <%=i18n.escapeRoom.steps.indications.front.theme%>: <span id="theme-title">
                    <%=theme[0].toUpperCase() + theme.slice(1)%>
                </span>
        </span>
    </button>
    <% } %>
    <button class="rounded addButton text-block-add" id="buttonMain" onclick="insertContentBlock()">
        <span class="building-block-icon material-icons"> add </span>
        <p>
            <%= i18n.escapeRoom.steps.indications.front.catalog.addText%>
        </p>
    </button>

</div>
<br>
<div style="display:flex; justify-content:center">
    <dialog id="editDialog" style="overflow:auto">
        <form onsubmit="send(event,this)" action="/escapeRoom/<%=escapeRoom.id%>/assets" method="POST">
        </form>
        <div class="previewReusablePuzzle">
                    <iframe src="" id="previewReusablePuzzleIframe" frameborder="0"></iframe>
                </div>
    </dialog>
    <dialog id="reusablePuzzleDialog">
        <form method="POST" action="../reusablePuzzleInstance">
        </form>
    </dialog>
</div>

<script>
    function toggleCatalogModal() {
        const configZone = $('#configZone');
        const configForm = $('#configForm');
        const resources = $('.sectionAddResource');

        configZone.attr('hidden', true);
        resources.removeAttr('hidden');

        $(".sections").scrollTop(0);
        const modal = $(".modalCatalogResource");
        if(modal.hasClass("active")) {
            $('body').css("overflow", "scroll");
        } else {
            $('body').css("overflow", "hidden");
            window.scrollTo(0, 0);
        }
        modal.toggleClass("active");
    }

    function puzzleForm(config, puzzle, reusablePuzzleId, puzzleName, puzzleDesc) {
         return `
        <div class="editDialog">
            <h3 style="margin: 0;"> ${ puzzleName } </h3>
            <p> ${ puzzleDesc } </p>
            <h4 class="titleLabelEdit">
                <%=i18n.escapeRoom.steps.indications.front.catalog.config.nameDescription%>
            </h4>
            <div>
                <label for="name">
                    <%=i18n.escapeRoom.steps.indications.front.catalog.config.name%>
                </label>
                <input id="nameOfReusablePuzzle" type="text" required name="name" value="${puzzle.name || ''}"/>
            </div>
            <div>
                <label for="description">
                    <%=i18n.escapeRoom.steps.indications.front.catalog.config.description%>
                </label>
                <input id="descOfReusablePuzzle" type="text" name="description" value="${puzzle.description || ''}"/>
            </div>
                <!--<h4 class="titleLabelEdit"> <%=i18n.escapeRoom.steps.indications.front.catalog.config.measures%> </h4>
                <div >
                <div>
                    <label for="height"><%=i18n.escapeRoom.steps.indications.front.catalog.config.height%></label>
                    <span class="editUnit">
                        <input   type="number" name="height"/>
                        <p> px </p>
                    </span>
                </div>
                <div>
                    <label for="width"><%=i18n.escapeRoom.steps.indications.front.catalog.config.width%></label>
                    <span class="editUnit">
                        <input  type="number" name="width"/>
                        <p> px </p>
                    </span>
                </div>
                </div>-->
            </div>
            <div class="editDialog">
                <h4 class="titleLabelEdit">
                    <%=i18n.escapeRoom.steps.indications.front.catalog.config.assignedPuzzle%>
                </h4>
                    <select id="associatedPuzzle" onchange="setPuzzleSol(${puzzle.id},config,${reusablePuzzleId})"  name="puzzle">
                        ${window.puzzles.map((puzzler,index) => {
                            return `<option ${(puzzler.id == config.puzzle) ? "selected": ""} value="${puzzler.id}">${puzzler.title}</option>`
                        }).join('')}
                    </select>
                    <div>
                    <label for="puzzleSol">
                        <%=i18n.escapeRoom.steps.indications.front.catalog.config.puzzleSolution%>
                    </label>
                     <input id="puzzleSol" value="${(window.puzzles && (window.puzzles.find(p=> p.id == config?.puzzle)?.sol !== undefined)) ? (window.puzzles.find(p=> p.id == config?.puzzle)?.sol):window.puzzles[0]?.sol || ""}" onchange="updateIframe(config, ${puzzle.id})"
                        name="puzzleSol"/>
                    <span ${window.puzzles && window.puzzles[0]?.assignedReusablePuzzleInstance && window.puzzles[0]?.assignedReusablePuzzleInstance != puzzle.id ? null : 'style="display: none"' }  id="warningSpan" title="Puzzle assigned to another instance" class="material-icons">
                    warning
                    </span>
                    <select name="validator">
                            <option value="exact" ${window.puzzles && window.puzzles[0]?.validator && window.puzzles[0].validator === 'exact' ? "selected" : null }>
                                <%=i18n.escapeRoom.steps.puzzles.validator.exact%>
                            </option>
                            <option value="caseinsensitive" ${window.puzzles && window.puzzles[0]?.validator && window.puzzles[0].validator === "caseinsensitive" ?  "selected" : null } >
                                <%=i18n.escapeRoom.steps.puzzles.validator.caseinsensitive%>
                            </option>
                            <option value="range" ${window.puzzles && window.puzzles[0]?.validator && window.puzzles[0].validator === 'range' ? "selected"  : null } >
                                <%=i18n.escapeRoom.steps.puzzles.validator.range%>
                            </option>
                            <option value="regex" ${window.puzzles && window.puzzles[0]?.validator && window.puzzles[0].validator === 'regex' ? "selected"  : null } >
                                <%=i18n.escapeRoom.steps.puzzles.validator.regex%>
                            </option>
                        </select>
                            </div>
            </div>
            <div class="editDialog" id="appendFormElementsHere">
                <h4 class="titleLabelEdit"> Customization </h4>
            </div>
        `

    }
    function editPuzzle(id, mime) {
        $('.previewReusablePuzzle').show();
        const jsonPuzzle = window.reusablePuzzleInstances.find(p => p.id == id);
        toggleCatalogModal();
        console.log(jsonPuzzle)
        openPuzzleConfiguration(jsonPuzzle, jsonPuzzle.reusablePuzzleId);
        return;
    }

    function setPuzzleSol(id, config, reusablePuzzleId) {
        const puzzleSol = $('#puzzleSol');
        const puzzleId = $('#associatedPuzzle').val();
        const span = $('#warningSpan');
        const validator = $('#inputValidator');
        const puzzleSelected = window.puzzles.find(p => p.id == puzzleId);
        const assignDiv = $('#assignPuzzDiv');

        if(puzzleSelected) {
            puzzleSol.val(puzzleSelected.sol)
            if (puzzleSelected.assignedReusablePuzzleInstance && puzzleSelected.assignedReusablePuzzleInstance != id) {
                span.show();
            } else {
                span.hide();
            }
            $(`#inputValidator option:selected`).attr("selected", "null");
            $(`#inputValidator option[value="${puzzleSelected.validator}"]`).attr("selected", "selected");
            assignDiv.show();
            validator.show()
        } else {
            puzzleSol.val("");
            span.hide();
            validator.hide()
            assignDiv.hide();
        }
        config.solutionLength = puzzleSol.val().length;
        updateIframe(config, reusablePuzzleId);
    }

    function editAsset(id, mime) {
        const config = window.assets.find(a => a.id == id).config;
        const configJSON = parseAssetConfig(mime, config);
        const dialog = $('#editDialog');
        const form = dialog.find('form');
        form.attr('action', `./asset/${id}`);
        form.empty();
        if (mime.search(imageRegex) !== -1) {
            form.append(`
                    <div class="containerBlocksEdit">
                        <div>
                            <h4 class="titleLabelEdit"> ${i18n.catalog.config.measures} </h4>
                            <div class="editDialogForm">

                            <div>
                                <label for="height">${i18n.catalog.config.height}</label>
                                <span class="editUnit">
                                    <input class="light" value="${configJSON.height ? configJSON.height : 0}" name="height"/>
                                    <p> px </p>
                                </span>
                            </div>
                            <div>
                                <label for="width">${i18n.catalog.config.width}</label>
                                <span class="editUnit">
                                    <input class="light" type="number" value="${configJSON.width ? configJSON.width : 0}"  name="width"/>
                                    <p> px </p>
                                </span>
                            </div>
                        </div>
                    </div>`

                    );


        } else if (mime.search(videoRegex) !== -1) {
            form.append(`
            <div class="containerBlocksEdit">
            <div >
                <h4 class="titleLabelEdit"> ${i18n.catalog.config.measures} </h4>
                <div class="editDialogForm">
                <div>
                    <label for="height">${i18n.catalog.config.height}</label>
                    <span class="editUnit">
                        <input class="light" type="number" value="${configJSON.height ? configJSON.height : 0}" name="height"/>
                        <p> px </p>
                    </span>
                 </div>
                <div>
                    <label for="width">${i18n.catalog.config.width}</label>
                    <span class="editUnit">
                        <input class="light" type="number" value="${configJSON.width ? configJSON.width : 0}"  name="width"/>
                        <p> px </p>
                    </span>
                </div>
                </div>
                </div>
                <div>
                    <h4 class="titleLabelEdit"> ${i18n.catalog.config.options} </h4>
                <div class="checkBoxEditContainer">
                    <div><label for="autoplay">${i18n.catalog.config.autoplay}</label><input ${configJSON.autoplay !== "undefined" ? "checked" : ""} type="checkbox" name="autoplay"/></div>
                    <div><label for="download">${i18n.catalog.config.download}</label><input ${configJSON.download !== "undefined" ? "checked" : ""} type="checkbox" name="download"/></div>
                    <div><label for="controls">${i18n.catalog.config.controls}</label><input ${configJSON.controls !== "undefined" ? "checked" : ""} type="checkbox" name="controls"/></div>
                </div>
                </div>
                </div>
                `);
        } else if (mime.search(audioRegex) !== -1) {
            form.append(`
            <div class="containerBlocksEdit">
                <div>
                    <h4 class="titleLabelEdit"> Opciones </h4>
                    <div>
                    <label for="controls">Controls</label>
                    <input type="checkbox" ${configJSON.controls ? "checked" : ""} name="controls"/>
                </div>
            </div>`);
        } else if (mime.search(pdfRegex) !== -1) {
            form.append(`
                    <div class="containerBlocksEdit">
                        <div>
                            <h4 class="titleLabelEdit"> ${i18n.catalog.config.measures} </h4>
                            <div class="editDialogForm">

                            <div>
                                <label for="height">${i18n.catalog.config.height}</label>
                                <span class="editUnit">
                                    <input class="light" value="${configJSON.height ? configJSON.height : 0}" name="height"/>
                                    <p> px </p>
                                </span>
                            </div>
                            <div>
                                <label for="width">${i18n.catalog.config.width}</label>
                                <span class="editUnit">
                                    <input class="light" type="number" value="${configJSON.width ? configJSON.width : 0}"  name="width"/>
                                    <p> px </p>
                                </span>
                            </div>
                        </div>
                    </div>`

                    );
        } else if (mime.search(webappRegex) !== -1) {
            form.append(`
                    <div class="containerBlocksEdit">
                        <div>
                            <h4 class="titleLabelEdit"> ${i18n.catalog.config.measures} </h4>
                            <div class="editDialogForm">

                            <div>
                                <label for="height">${i18n.catalog.config.height}</label>
                                <span class="editUnit">
                                    <input class="light" value="${configJSON.height ? configJSON.height : 0}" name="height"/>
                                    <p> px </p>
                                </span>
                            </div>
                            <div>
                                <label for="width">${i18n.catalog.config.height}</label>
                                <span class="editUnit">
                                    <input class="light" type="number" value="${configJSON.width ? configJSON.width : 0}"  name="width"/>
                                    <p> px </p>
                                </span>
                            </div>
                        </div>
                    </div>`

                    );
        } else {
            return `<div>${item.name}</div>`;
        }
        form.append(`<input class="editButton submit" type="submit" value="<%=i18n.common.save%>">`);
        $('.previewReusablePuzzle').hide();

        dialog.dialog({
            modal: true,
            resizable: false,
            height: "auto",
            width: window.innerWidth > 900 ? 860 : window.innerWidth * 0.8,
            show: {
                effect: "scale",
                duration: 200
            },
            hide: {
                effect: "scale",
                duration: 200
            },
        }).show()
    }

    function parseAssetConfig(mime, config) {
        if (!config) return {};
        if (typeof config === "object"){return config}
        let configJSON = {};
        if(mime.search(reusableRegex) !== -1){
            configJSON = JSON.parse(config)
        }
        let texts = config.split(';');
        texts.forEach(text => {
            const data = text.split(':');
            configJSON[data[0]] = data[1];
        })
        if (mime.search(imageRegex) !== -1) {
            return {
                width: configJSON.width,
                height: configJSON.height
            }
        } else if (mime.search(videoRegex) !== -1) {
            return {
                width: configJSON.width,
                height: configJSON.height,
                controls: configJSON.controls,
                autoplay: configJSON.autoplay,
                download: configJSON.download
            }
        } else if (mime.search(audioRegex) !== -1) {
            return {
                controls: configJSON.controls,
                autoplay: configJSON.autoplay,
            }
        } else if (mime.search(pdfRegex) !== -1) {
            return {
                width: configJSON.width,
                height: configJSON.height,
            }
        } else if (mime.search(webappRegex) !== -1) {
            return {
                width: configJSON.width,
                height: configJSON.height,
            }
        } else if (mime.search(reusableRegex) !== -1) {
            return {
                width: configJSON.width,
                height: configJSON.height,
            }
        } else {
            return {};
        }
    }


    function deleteReusablePuzzleInstance(id) {
        fetch(`/escapeRooms/${escapeRoomId}/reusablePuzzleInstance/${id}`, {
            method: 'DELETE',
        }).then(response => {
            if (response.ok) {
                const asset = $(`#p-${id}`);
                asset.remove();
                overlayTrigger(id, false)
            }
        });
    }

    function copyURl(url) {
        navigator.clipboard.writeText(window.location.origin + url);
    }

    function insertContentBlock() {
        const text = `<p>${window.placeholder}</p>`
        insertAndScrollContent(0, 'text', { text }, puzzleList);
        if($('.building-block').children().last().offset()) {
            window.scrollTo(0, $('.building-block').children().last().offset().top);
        }
    }

    function insertAndScrollContent(index, type, id, puzzles) {
        let payload = {};
        let newType = type;

        if(type === "reusable") {
            const puzzle = window.reusablePuzzleInstances.find(p => p.id == id);
            payload = { mime: "application/reusable", config: puzzle.config, url: `/escapeRooms/${escapeRoomId}/reusablePuzzleInstances/${puzzle.id}/render`};
            newType = "catalog"
       } else if(type === "countdown" || type === "progress" || type === "ranking") {
            payload = id;
        }else{
            const asset = window.assets.find(p => p.id == id);
            type = "catalog"
            payload = { mime: asset.mime, config: asset.config, url: asset.url}
            newType = "catalog"
        }
        if(payload.url){
            payload.url = encodeURI(payload.url);
        }


        insertContent(index, newType, payload, puzzles);
        if($('.building-block').children().last().offset()) {
            window.scrollTo(0, $('.building-block').children().last().offset().top);
        }
    }

    function insertGamification(index, type, payload, puzzles) {
        toggleCatalogModal();
        insertAndScrollContent(index, type, payload, puzzles);
    }

    function overlayTriggerCatalog(id, close) {
        const overlay = $('.overlay-trigger[data-id="' + id + '"]');
        overlay.hide();


        if (!close) {
            overlay.css("transform", `translateY(${overlay.height() / 1.2}px`);
            overlay.show();

            // Borrar overlay con click afuera
            // Espera un momento antes de agregar el listener, para evitar cierre inmediato
            setTimeout(() => {
                $(document).on('click.overlay', function (event) {
                    // 1. Verifica si el clic NO fue directamente sobre el overlay.
                    if (!overlay.is(event.target) && overlay.has(event.target).length === 0) { //2. Verifica si el clic NO fue en un hijo del overlay.
                        overlay.hide();
                        $(document).off('click.overlay'); // Elimina el evento después de ocultar el overlay
                    }
                });
            }, 50);
        }
    }

    function openPuzzleConfiguration(puzzle, baseId){
        const configZone = $('#configZone');
        let config = puzzle.config;
        if(typeof config === 'string') {
            try {
                config = JSON.parse(config);
            } catch (e) {
                console.error("Error parsing puzzle config:", e);
                config = {};
            }
        }
        const configForm = $('#configForm');
        const resources = $('.sectionAddResource');
        const puzzleName = puzzle.name;
        const puzzleDesc = puzzle.description;
        configForm.empty();
        configZone.removeAttr('hidden');
        resources.attr('hidden', true);
        window.currentOpenPuzzleConfig = config;

        if(config.url || puzzle.id){
            fetch(config.url ? config.url : `/reusablePuzzlesInstances/${puzzle.id}/form`)
            .then(response => response.text())
            .then(textString => {
                let elements = textString;
                elements += '<div class="editDialogButtons">';
                elements += `<input type="text" hidden value=${baseId} name="reusablePuzzleId"/>`;
                elements += `<input type="submit" class="btn rounded acceptButton"  value="<%=i18n.common.save%>"/>`;
                elements += `<button type="button" class="btn rounded deleteButton" onclick="goBack()"><%=i18n.common.back%></button>`;
                elements += `</div>`;
                configForm.html(puzzleForm(config, puzzle, baseId, puzzleName, puzzleDesc));
                configForm.attr("action", config.url ? "reusablePuzzleInstance" : `./reusablePuzzleInstance/${puzzle.id}`);

                $('#appendFormElementsHere').append(elements);
                config.solutionLength = puzzles ? puzzles[0].sol?.length : 0;
                config.puzzle =  puzzles ? puzzles[0].id : undefined;
                updateIframe(config, puzzle.reusablePuzzleId);

                $(".sections").scrollTop(0);
            });
        } else {
            elements = generateConfig(config);
            elements += `<input type="text"  hidden value=${baseId} name="reusablePuzzleId"/>`;
            elements += `<button type="button" class="editButton" onclick="goBack()"><%=i18n.common.back%></button>`;
            elements += `<button type="reset" class="editButton" ><%=i18n.common.reset%></button>`;
            elements += `<input type="submit" class="acceptButton" value="<%=i18n.common.save%>"/>`;
            configForm.html(elements);
            $(".sections").scrollTop(0);
            configForm.attr("action",  "reusablePuzzleInstance");
        }
    }

    function updateIframe(config, reusablePuzzleId) {
        $('#previewReusablePuzzleIframe').attr('src', `/reusablePuzzlePreview/${reusablePuzzleId}?escapeRoomId=<%=escapeRoom.id%>&puzzleId=${config.puzzle}&config=${encodeURIComponent(JSON.stringify(config))}`);
    }

    function goBack(){
        const configZone = $('#configZone');
        const configForm = $('#configForm');
        const resources = $('.sectionAddResource');

        configZone.attr('hidden', true);
        resources.removeAttr('hidden');
    }

    let types = [];
    function generateConfig(config) {
        let result = `<input type="text" name="name" required/>`;
        const configToRender = config.confg;
        types = config.types;
        result += configToRender.map(item => {return renderConfig(item)}).join('');
        return result;
    }

    function renderConfig(item, depth=0, inputName=""){
        const type = item.type;
        let config;
        const isArray = type.substring(type.length-6) === '-array';
        const arraySubtype = isArray ? type.substring(0,type.length-6) : null;

        if(isArray){
            types.map(t=>{if(t.type === arraySubtype){config = t.config; return;}})
        } else {
            types.map(t=>{if(t.type === type){config = t.config; return;}})
        }

        let inputNameN = inputName.length !==0 ? `${inputName}-${item.name}` : item.name;
        let returnVal = "";

        if(type === "text" || type === "number" || type === "checkbox"){
            returnVal = `<div>${item.name}<input type=${item.type} name="${inputNameN}"/>  </div>`;
        }else {
            let depthN = depth + 1;
            if(isArray){
                inputNameIndex = `${inputNameN}-0`;
                if(arraySubtype === "text" || arraySubtype === "number" || arraySubtype === "checkbox"){
                    returnVal = `<div id=${inputNameN}>
                    ${item.name}
                    </div>
                    <button type="button" onclick="addInput('${inputNameN}','${arraySubtype}')">+</button>
                    `;
                }else{
                    const childElement = config.map((el) => { return renderConfig(el, depthN,inputNameIndex); }).join('');
                    returnVal = `<div id=${inputNameN}>
                    ${item.name }<div>${childElement}</div>
                    </div>
                    <button type="button" onclick="addInput('${inputNameN}','${arraySubtype}')">+</button>
                    `
                }
            } else {
                const childElement = config.map((el) => { return renderConfig(el, depthN, inputNameN); }).join('');
                returnVal = `<div>${item.name }${childElement}</div>`
            }
        }

        return `<div style="z-index:${depth};margin-left:${20*depth}px"> ${returnVal}</div>`;
    }

    function addInput(name, type){
        const index = $(`#${name}`).children().length;
        const newName = `${name}-${index}`;
        let newConfig = renderConfig({name:newName,type})
        $(`#${name}`).append(newConfig);
    }

    function send(e,form) {
        fetch(form.action, {method:'post', body: new URLSearchParams(new FormData(form))})
        .then((res)=>{
            if(res.status !== 200){
                return;
            }
            res.json().then((resJSON)=>{
                if(resJSON.type === "reusable"){
                    window.reusablePuzzleInstances.forEach((puzzle) => {
                        if(puzzle.id == resJSON.id) {
                            puzzle.config = resJSON.config;
                            puzzle.name = resJSON.name;
                            puzzle.description = resJSON.description;
                        }
                    });
                    toggleCatalogModal();
                    const row = $(`#p-${resJSON.id}`);
                    console.log(resJSON);
                    window.reusablePuzzleInstances.push(resJSON)
                    console.log(row)
                    if(!row.length) {
                        const config = JSON.stringify({reusablePuzzleId: Number(resJSON.reusablePuzzleId), name:resJSON.name, description:resJSON.description, id:resJSON.id, config:resJSON.config}).replaceAll("\"", "&quot;")
                        console.log(config)
                        $('#myTabContent tr:last').after(`<tr class="catalogItem" id=p-${resJSON.id}>
                            <td>
                                <p class="title">
                                    ${resJSON.name}
                                </p>
                            </td>
                            <td> <span class="building-block-icon material-icons btn-green"> videogame_asset </span>
                            </td>
                            <td>
                                <div class=" button-group row-button">
                                    <div class="overlay-trigger" data-id="${resJSON.id}">
                                        <p class="text-overlay">
                                            <%= i18n.escapeRoom.steps.indications.front.catalog.deleteConfirm%>
                                        </p>
                                        <button class="deleteButton" type="button"
                                            onclick='overlayTriggerCatalog("${resJSON.id}", true)'><%=i18n.common.cancel%></button>
                                        <button class="acceptButton" type="button"
                                            onclick='deleteReusablePuzzleInstance("${resJSON.id}")'><%=i18n.common.accept%></button>
                                    </div>
                                    <button class="listButton iconButton delete-button"
                                        onclick="overlayTriggerCatalog('${resJSON.id}', false)">
                                        <span class="building-block-icon material-icons" id="delete">
                                            delete_outline </span>
                                    </button>
                                    <button class="listButton iconButton editButton"
                                        onclick="editPuzzle('${resJSON.id}', 'application/reusable', ${config})">
                                        <span class="building-block-icon material-icons" id="edit"> edit
                                        </span>
                                    </button>
                                    <button class="listButton linkButton" onclick='copyURl("${resJSON.url}")'>
                                        <span class="building-block-icon material-icons" id="link"> link
                                        </span>
                                        <div class="tooltip-link"> <%= i18n.escapeRoom.steps.indications.front.catalog.copyUrl%> </div>
                                        <div class="tooltip-link" id="link-copied">
                                            <%=i18n.escapeRoom.steps.indications.front.catalog.copied%>
                                        </div>
                                    </button>

                                    <button class="rounded listButton addButton"
                                        onclick='insertAndScrollContent(0,"reusable", "${resJSON.id}", [window.puzzles.findIndex(p=>p.id == ${resJSON.config.puzzle})])'>
                                        <span class="building-block-icon material-icons" id="add"> add
                                        </span>
                                        <p>
                                            <%=i18n.escapeRoom.steps.indications.front.catalog.addBlock%>
                                        </p>
                                    </button>
                                    </div>
                            </td>
                        </tr>`);
                    }
                    $('#noResources').hide();
                    row.find('.title').text(resJSON.name);
                } else {
                    window.assets.forEach((asset) => {
                        if(asset.id == resJSON.id) {
                            asset.config = resJSON.config;
                        }
                    });
                    if($('#editDialog').hasClass("ui-dialog-content")) {
                        $('#editDialog').dialog('close');
                    }
                }
            })
        });
        e.preventDefault();

    }

    window.onload = function() {
        window.addEventListener('change', function(e) {
            // Check if e.target is a child of .editDialog
            if ($(e.target).closest('.editDialog').length > 0) {
                const closestForm = $(e.target).closest('form')[0]
                // e.target is inside .editDialog
                const formData = new FormData(closestForm);
                const newConfig = Object.fromEntries(formData.entries());
                newConfig.solutionLength = $("#puzzleSol").val().length;
                if(e.target.id != "nameOfReusablePuzzle" && e.target.id != "descOfReusablePuzzle") {
                    updateIframe(newConfig,newConfig.reusablePuzzleId);
                }
            }
        });
    }
</script>
