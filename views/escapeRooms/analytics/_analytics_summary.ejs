<script src="/js/extractColor.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
<form method="get" class="participantsList" action="/escapeRooms/<%= escapeRoom.id %>/analytics/">
    <div class="filters">
        <label for="turnId"><%=i18n.turnos.Turno%>
            <select name="turnId" id="turnId">
                <option value="" <%= !turnId ? "selected": ""%> ><%=i18n.turnos.all%></option>
                <% for (t in escapeRoom.turnos) {
                    var turno = escapeRoom.turnos[t] ;
                    // if (turno.status !== "pending" ) {
                %>
                <option value="<%=turno.id%>" <%= turnId == turno.id ? "selected" : "" %> >
                    <%= getFullDate(turno.date)%>
                </option>
                <% // }
                } %>
            </select>
        </label>
        <button type="submit" class="filter-button white" ><%=i18n.common.filter%></button>

    </div>
</form>
<div class="card-container">
    <% var counter = 0;
            for (var k in summary) {%>
    <div class="card <%=k%> animated zoomIn  " style="animation-delay: <%=counter/5%>s;">
        <div class="card-icon"><i class="material-icons"><%=summary[k].icon%></i></div>
        <div class="card-title"><%=i18n.analytics.main.dashboard[k]%></div>
        <div class="card-content"><%=summary[k].value%></div>
    </div>
    <%counter++;
    }%>
</div>
<br/>
<div class="chart-summary">
    <%for (var i in charts) {%>
        <canvas id="<%=i%>"  height="400px" style="width:100%; height:400px; "></canvas>
        <script>
          var colors = [green, yellow, orange, red, purple];
          var ctx = document.getElementById("<%=i%>").getContext('2d');
          Chart.defaults.global.defaultFontFamily="Lato";

          new Chart(ctx, {
            type: 'bar',
            data: {
              labels: <%-JSON.stringify(charts[i].labels)%>,
              datasets: [{
                data: <%-JSON.stringify(charts[i].data)%>,
                backgroundColor: colors.map((c)=>hexToRgbA(c)),
                borderColor: colors.map((c)=>hexToRgbA(c)),
                borderWidth: 4
              }]
            },
            options: {
              legend: {
                display: false,
              },
              scales: {
                yAxes: [{
                  scaleLabel: {
                    display: true,
                    labelString: "<%=i18n.analytics.main.dashboard[i]%>",
                    fontColor: "white",
                    fontSize: 18
                  },
                  ticks: {
                    beginAtZero: true,
                    stepSize: 1,
                    fontColor: "white",
                    fontSize: 18
                  },

                }],
                xAxes: [{
                  ticks: {
                    fontColor: "white",
                    fontSize: 18
                  }
                }]

              }
            }
          });
        </script>
    <%}%>
</div>