<%- include ('../partials/_header.ejs') %>


<div class='main' style='color:white;padding:20px'>

    <h1>Creación de un nuevo puzzle</h1>
    <p> Suba un ZIP con el fichero un fichero config.json </p>
    <form method='POST' style='width:30%' enctype='multipart/form-data' action='../reusablePuzzles'>
        <div style='display:flex;flex-direction:column;justify-content:start'>
            <input type='text' name='name' placeholder='Puzzle Name' required/>
            <input type='text' name='description' placeholder='Puzzle description' required/>
            <input type='file' name='upload'/>
            <input type='submit'/>
            <br>
        </div>
    </form>
    <button onclick='window.location.replace(document.referrer)'>Volver</button>
    <div>
        <h3>Config</h3>
        <div style="border:solid 1px;" >
           <h2>Crear configuracion</h2>
            <input type='text' id='nameTypeConfig' placeholder='Property name'/>
            <select id='typeSelectorConfig'>
                <option value='number'>Number</option>
                <option value='text'>String</option>
                <option value='checkbox'>Boolean</option>
                <option value='array'>Array</option>
            </select>
            <button onclick='appendToConfig()'> + </button>
            <div id="configForm"></div>
        </div>
        <div>
            <h4>Creador de tipos</h4>
            <input type='text' id='type' placeholder='Type name'/>
            <br/>
            <input type='text' id='nameType' placeholder='Property name'/>
            <select id='typeSelector'>
                <option value='number'>Number</option>
                <option value='text'>String</option>
                <option value='checkbox'>Boolean</option>
                <option value='array'>Array</option>
            </select>
            <button onclick='addElementToType()'> Añadir </button>
            <div id='typeDisplay'> </div>
            <button onclick='addType()'> Crear tipo </button>
        </div>
    </div>
</div>

<style>
    input {
        margin: 5px;
        padding: 5px;
    }

</style>


<script>
    let currentType = [];
    let index = 0;
    const types = [{type: "text"},{type: "number"},{type: "checkbox"},{type: "array"}]

    function addType(){
        const name = $('#type').val();
        $('#typeSelector').append(`<option value="${name}">${name}</option>`)
        $('#typeSelectorConfig').append(`<option value="${name}">${name}</option>`)
        types.push({type:name, config: currentType});
        $('#typeDisplay').empty();
        currentType = [];
        index = 0;
    }

    function addElementToType(){
        type = document.getElementById('typeSelector').value;
        const name = $('#nameType').val();
        currentType = [
            ...currentType,
            {name, type},
        ];
        $('#typeDisplay').append(`<div><label style="margin-right:10px">${name}</label><label>${type}</label></div>`);
        index++;
    }

    function renderConfig(item, depth=0){
      const colors = ["#FF5733", "#33FF57", "#3357FF", "#FF33A1", "#A133FF"];
      const color = colors[depth%5];

       const type = item.type;
       let config;
       types.map(t=>{if(t.type === type){config = t.config; return;}})
       let returnVal = "";
       switch (type) {
            case 'number':
                returnVal = `<div>${item.name}  Number</div>`;
                break;
            case 'text':
                returnVal = `<div>${item.name}  Text</div>`;
                break;
            case 'checkbox':
                returnVal = `<div>${item.name}  Checkbox</div>`;
                break;
            default:
                if(!config){
                    console.log("No config found")
                    return "";
                }
                let depthN = depth + 1;
                const childElement = config.map((el) => { return renderConfig(el, depthN); }).join('');
                returnVal = `<div>${item.name ? item.name : "<input name='${name}-name' type='text'/>"+ item.type}${childElement}</div>`
                break;
       }
        return `<div style="background-color:${color};z-index:${depth};margin-left:${20*depth}px"> ${returnVal}</div>`;

    }

    const globalConfig = [];

    function appendToConfig(){
        type = $('#typeSelectorConfig').val();
        const form = $('#configForm')
        const name = $('#nameTypeConfig').val();
        globalConfig.push({type, name});
        const configToRender = globalConfig.map((confItem)=>{return renderConfig(confItem)}).join('');
        form.html(configToRender)
    }


</script>
